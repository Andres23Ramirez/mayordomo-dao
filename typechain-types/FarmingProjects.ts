/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FarmingProjectsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProject"
      | "deleteProject"
      | "getInvestmentAmount"
      | "getProjectCounter"
      | "getProjectDetails"
      | "investInProject"
      | "projectCounter"
      | "projects"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsWithdrawn"
      | "InvestmentMade"
      | "ProjectCreated"
      | "ProjectDeleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestmentAmount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investInProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestmentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investInProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, owner: string, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    investor: string,
    amount: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    owner: AddressLike,
    title: string,
    targetAmount: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    owner: string,
    title: string,
    targetAmount: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    owner: string;
    title: string;
    targetAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectDeletedEvent {
  export type InputTuple = [projectId: BigNumberish];
  export type OutputTuple = [projectId: bigint];
  export interface OutputObject {
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FarmingProjects extends BaseContract {
  connect(runner?: ContractRunner | null): FarmingProjects;
  waitForDeployment(): Promise<this>;

  interface: FarmingProjectsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProject: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _location: string,
      _imageUrl: string,
      _targetAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  deleteProject: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getInvestmentAmount: TypedContractMethod<
    [_projectId: BigNumberish, _investor: AddressLike],
    [bigint],
    "view"
  >;

  getProjectCounter: TypedContractMethod<[], [bigint], "view">;

  getProjectDetails: TypedContractMethod<
    [_projectId: BigNumberish],
    [
      [string, string, string, string, string, bigint, bigint, boolean] & {
        owner: string;
        title: string;
        description: string;
        location: string;
        imageUrl: string;
        targetAmount: bigint;
        currentAmount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  investInProject: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "payable"
  >;

  projectCounter: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        owner: string;
        title: string;
        description: string;
        location: string;
        imageUrl: string;
        targetAmount: bigint;
        currentAmount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  withdrawFunds: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _location: string,
      _imageUrl: string,
      _targetAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteProject"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getInvestmentAmount"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _investor: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjectDetails"
  ): TypedContractMethod<
    [_projectId: BigNumberish],
    [
      [string, string, string, string, string, bigint, bigint, boolean] & {
        owner: string;
        title: string;
        description: string;
        location: string;
        imageUrl: string;
        targetAmount: bigint;
        currentAmount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "investInProject"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "projectCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        id: bigint;
        owner: string;
        title: string;
        description: string;
        location: string;
        imageUrl: string;
        targetAmount: bigint;
        currentAmount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentMade"
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectDeleted"
  ): TypedContractEvent<
    ProjectDeletedEvent.InputTuple,
    ProjectDeletedEvent.OutputTuple,
    ProjectDeletedEvent.OutputObject
  >;

  filters: {
    "FundsWithdrawn(uint256,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "InvestmentMade(uint256,address,uint256)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,string,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectDeleted(uint256)": TypedContractEvent<
      ProjectDeletedEvent.InputTuple,
      ProjectDeletedEvent.OutputTuple,
      ProjectDeletedEvent.OutputObject
    >;
    ProjectDeleted: TypedContractEvent<
      ProjectDeletedEvent.InputTuple,
      ProjectDeletedEvent.OutputTuple,
      ProjectDeletedEvent.OutputObject
    >;
  };
}
